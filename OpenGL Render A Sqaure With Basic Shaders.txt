import org.lwjgl.BufferUtils;

import java.nio.FloatBuffer;
import java.nio.IntBuffer;

import static org.lwjgl.opengl.GL20.*;
import static org.lwjgl.opengl.GL30.glBindVertexArray;
import static org.lwjgl.opengl.GL30.glGenVertexArrays;

public class LevelEditorScene extends Scene { //Ignore Scene Abstract Class

    private String vertexShaderSrc = "#version 330 core\n" +
            "\n" +
            "layout (location=0) in vec3 aPos;\n" +
            "layout (location=1) in vec4 aColor;\n" +
            "\n" +
            "\n" +
            "out vec4 fColor;\n" +
            "        \n" +
            "void main() {\n" +
            "        fColor = aColor;\n" +
            "        gl_Position = vec4(aPos ,1.0);\n" +
            "}";
    private String fragmentShaderSrc = "#version 330 core\n" +
            "\n" +
            "in vec4 fColor;\n" +
            "\n" +
            "out vec4 color;\n" +
            "\n" +
            "void main(){\n" +
            "    color = fColor;\n" +
            "}";

    private int vertexID , fragmentID , shaderProgram;

    private float[] vertexArray = {
            // position           // color
            0.5f ,-0.5f , 0.0f ,      1.0f , 0.0f , 0.0f ,1.0f, //Bottom Right 0
            -0.5f ,0.5f , 0.0f ,      0.0f , 1.0f , 0.0f ,1.0f, //Top Left     1
            0.5f ,0.5f , 0.0f ,       0.0f , 0.0f , 1.0f ,1.0f, //Top Right    2
            -0.5f , -0.5f , 0.0f ,    1.0f , 1.0f , 0.0f ,1.0f, //Bottom Left  3
    };


    //MUST BE in COUNTER-CLOCKWISE ORDER
    private int[] elementArray = {
            /*
                     x         x


                     x         x

             */

            2,1,0, //Top Right Triangle
            0,1,3 //Bottom Left Triangle
    };

    private int vaoID , vboID , eboID;

    public LevelEditorScene() {

    }

    @Override
    public void init(){
        //=================================================================================
        //                         Compile and Link The Shader
        //=================================================================================

        //*************************************************
        //                VERTEX SHADER
        //*************************************************

        //Load and compile Vertex Shader
        vertexID = glCreateShader(GL_VERTEX_SHADER);

        //Pass the shader source to the GPU

        glShaderSource(vertexID , vertexShaderSrc);

        //Compile Shader
        glCompileShader(vertexID);

        //Check for Errors
        int success = glGetShaderi(vertexID , GL_COMPILE_STATUS); //Returns the Success int 0 = fail
        if(success == GL_FALSE){
            int len = glGetShaderi(vertexID , GL_INFO_LOG_LENGTH); //Need the length due to C Mapping as String in C is char[]
            System.err.println("Error: default.glsl \n\t Vertex Shader compilation failed");
            System.err.println(glGetShaderInfoLog(vertexID , len)); //Get the Error From log using Length
            assert false : "";
        }

        //*************************************************
        //               END VERTEX SHADER
        //*************************************************



        //*************************************************
        //                FRAGMENT SHADER
        //*************************************************

        //Load and compile Vertex Shader
        fragmentID = glCreateShader(GL_FRAGMENT_SHADER);

        //Pass the shader source to the GPU

        glShaderSource(fragmentID , fragmentShaderSrc);

        //Compile Shader
        glCompileShader(fragmentID);

        //Check for Errors
        success = glGetShaderi(fragmentID , GL_COMPILE_STATUS); //Returns the Success int 0 = fail
        if(success == GL_FALSE){
            int len = glGetShaderi(fragmentID , GL_INFO_LOG_LENGTH); //Need the length due to C Mapping as String in C is char[]
            System.err.println("Error: default.glsl \n\t Fragment Shader compilation failed");
            System.err.println(glGetShaderInfoLog(fragmentID , len)); //Get the Error From log using Length
            assert false : "";
        }

        //*************************************************
        //               END FRAGMENT SHADER
        //*************************************************



        //*************************************************
        //                  LINK SHADER
        //*************************************************

        //Link Shaders
        shaderProgram = glCreateProgram();
        glAttachShader(shaderProgram ,vertexID);
        glAttachShader(shaderProgram , fragmentID);
        glLinkProgram(shaderProgram);

        //Check for Linking Error
        success = glGetProgrami(shaderProgram , GL_LINK_STATUS); //Get the linking status
        if(success == GL_FALSE){
            int len = glGetProgrami(shaderProgram , GL_INFO_LOG_LENGTH); //Need the length due to C Mapping as String in C is char[]
            System.err.println("Error default.glsl \n\t Linking of Vertex and Fragment Shader Failed");
            System.err.println(glGetProgramInfoLog(shaderProgram , len));
            assert false : "";
        }

        //*************************************************
        //                END LINK SHADER
        //*************************************************


        //====================================================================
        //Generate VAO , VBO , AND EBO BUFFER OBJECTS and send them to the GPU
        //====================================================================
        vaoID = glGenVertexArrays(); // Create ID
        glBindVertexArray(vaoID); //Make Sure Everything After this line is only on vaoID

        //Create a float buffer of vertices
        FloatBuffer vertexBuffer = BufferUtils.createFloatBuffer(vertexArray.length);
        vertexBuffer.put(vertexArray).flip(); // Flip to ensure correct Orientation

        //Create VBO and upload the vertex buffer
        vboID = glGenBuffers();
        glBindBuffer(GL_ARRAY_BUFFER , vboID);
        glBufferData(GL_ARRAY_BUFFER , vertexBuffer , GL_STATIC_DRAW);

        //Create the indicies and upload

        IntBuffer elementBuffer = BufferUtils.createIntBuffer(elementArray.length);
        elementBuffer.put(elementArray).flip();

        //ElementBuffer

        eboID = glGenBuffers();
        glBindBuffer(GL_ELEMENT_ARRAY_BUFFER , eboID);
        glBufferData(GL_ELEMENT_ARRAY_BUFFER , elementBuffer , GL_STATIC_DRAW);

        // Add the vertex attribute Pointers
        int positionSize = 3;
        int colorSize = 4;
        int floatSizeByte = 4;
        int vertexSizeBytes = (positionSize + colorSize) * floatSizeByte;

        //Position
        glVertexAttribPointer(0 , positionSize , GL_FLOAT , false , vertexSizeBytes , 0); //Start at begin
        glEnableVertexAttribArray(0); //Enable the array

        //Color
        glVertexAttribPointer(1 , colorSize , GL_FLOAT , false , vertexSizeBytes , positionSize  * floatSizeByte); //Start After position (in bytes)
        glEnableVertexAttribArray(1);

        //========================================================================
        //END Generate VAO , VBO , AND EBO BUFFER OBJECTS and send them to the GPU
        //========================================================================
    }

    @Override
    public void update(float deltaTime) {
        //Bind Shader Program
        glUseProgram(shaderProgram);
        //Bind the VAO
        glBindVertexArray(vaoID);

        // Enable the attribute array pointers
        glEnableVertexAttribArray(0);
        glEnableVertexAttribArray(1);

        //Draw!!!
        glDrawElements(GL_TRIANGLES , elementArray.length , GL_UNSIGNED_INT , 0);

        //Unbind Everything
        glDisableVertexAttribArray(0);
        glDisableVertexAttribArray(1);

        glBindVertexArray(0); // Bind Nothing i.e 0

        glUseProgram(0); //Unbind Program
    }
}
